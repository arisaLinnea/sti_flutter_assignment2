// Mocks generated by Mockito 5.4.4 from annotations
// in dart_server2/test/server_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i6;

import 'package:dart_server/repositories/owner_repository.dart' as _i3;
import 'package:shared/shared.dart' as _i2;
import 'package:logger/src/log_level.dart' as _i8;
import 'package:logger/src/logger.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOwner_0 extends _i1.SmartFake implements _i2.Owner {
  _FakeOwner_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OwnerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOwnerRepository extends _i1.Mock implements _i3.OwnerRepository {
  MockOwnerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get filePath => (super.noSuchMethod(
        Invocation.getter(#filePath),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#filePath),
        ),
      ) as String);

  @override
  _i5.Future<String?> addToList({required dynamic json}) => (super.noSuchMethod(
        Invocation.method(
          #addToList,
          [],
          {#json: json},
        ),
        returnValue: _i5.Future<String?>.value('1'),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<_i2.Owner?> getElementById({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getElementById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i2.Owner?>.value(),
      ) as _i5.Future<_i2.Owner?>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getList() => (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<bool> update({
    required String? id,
    required dynamic json,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #json: json,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> remove({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i2.Owner deserialize(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #deserialize,
          [json],
        ),
        returnValue: _FakeOwner_0(
          this,
          Invocation.method(
            #deserialize,
            [json],
          ),
        ),
      ) as _i2.Owner);

  @override
  Map<String, dynamic> serialize(_i2.Owner? item) => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [item],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String itemAsString() => (super.noSuchMethod(
        Invocation.method(
          #itemAsString,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #itemAsString,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<Map<String, dynamic>> getServerList({
    required _i6.File? file,
    required String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getServerList,
          [],
          {
            #file: file,
            #name: name,
          },
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i7.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> get init => (super.noSuchMethod(
        Invocation.getter(#init),
        returnValue: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void v(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void t(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #t,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void f(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #f,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i8.Level? level,
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
